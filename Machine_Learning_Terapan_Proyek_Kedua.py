# -*- coding: utf-8 -*-
"""Sistem Rekomendasi Buku Berdasarkan Preferensi dan Rating Pengguna.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7Ee8giwIzloAKw4FALoepYXry4PWnYR

# **Sistem Rekomendasi Buku Berdasarkan Preferensi dan Rating Pengguna**

Oleh: Rizki Alvian

## **Install dan import library yang dibutuhkan**
"""

# Data preparation dan visualization
import numpy as np
import pandas as pd
import gzip
import seaborn as sns
import re
import random
import zipfile, os
import warnings
warnings.filterwarnings("ignore")

# Membangun dan analisa sistem rekomendasi
!pip install surprise

# Membangun model dan evaluasi
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from surprise import Reader, Dataset, SVD
from surprise.model_selection import train_test_split, cross_validate, GridSearchCV
from surprise import accuracy

"""## **Menyiapkan data yang akan digunakan**

Mengambil data dari kaggle.

Link: https://www.kaggle.com/datasets/arashnic/book-recommendation-dataset
"""

# Instal library kaggle
! pip install kaggle

# Membuat folder .kaggle di dalam folder root
!rm -rf ~/.kaggle && mkdir ~/.kaggle/

# Menyalin berkas kaggle.json pada direktori aktif saat ini ke folder .kaggle
!mv kaggle.json ~/.kaggle/kaggle.json
!chmod 600 ~/.kaggle/kaggle.json

# Unduh dataset menggunakan Kaggle CLI
!kaggle datasets download -d arashnic/book-recommendation-dataset

# Ekstraksi berkas zip ke direktori aktif saat ini
!unzip /content/book-recommendation-dataset.zip

"""## **Exploratory Data Analysis (EDA)**"""

df_book = pd.read_csv('Books.csv')
df_rating = pd.read_csv('Ratings.csv')
df_user = pd.read_csv('Users.csv')

"""Melihat karakteristik data buku"""

df_book

df_book.info()

print('Total ISBN adalah:', len(df_book.ISBN.unique()))
print('Total judul adalah:', len(df_book['Book-Title'].unique()))
print('Total pengarang adalah:', len(df_book['Book-Author'].unique()))
print('Total penerbit adalah:', len(df_book['Publisher'].unique()))

"""Melihat karakteristik data rating"""

df_rating

df_rating.info()

print('Total pengguna adalah:', len(df_rating['User-ID'].unique()))
print('Total buku adalah:', len(df_rating['ISBN'].unique()))
print('Total rating yang diterima adalah:', len(df_rating))

"""Melihat karakteristik data user"""

df_user

df_user.info()

"""## **Data Preparation**

Menyiapkan fitur-fitur yang diperlukan pada data buku
"""

buku = df_book[['ISBN', 'Book-Title','Book-Author', 'Publisher']]
buku.head()

# memeriksa missing value
buku.isnull().sum()

# mengisi missing value pada publisher dan author
buku.loc[:,'Book-Author'] = buku['Book-Author'].fillna('Unknown')
buku.loc[:,'Publisher'] = buku['Publisher'].fillna('Unknown')
buku.isnull().sum()

"""Menyiapkan fitur-fitur yang diperlukan pada data rating"""

rating = df_rating
rating.isnull().sum()

print('Jumlah rating 0 :', rating['Book-Rating'].eq(0).sum())
rating.shape

# menghapus data rating dengan nilai 0
rating = rating[df_rating['Book-Rating']>0]
rating.shape

"""Menyiapkan fitur-fitur yang diperlukan pada data user"""

user = df_user
user.isnull().sum()

# mengisi missing value dengan moduse dari Age
user['Age'] = user['Age'].fillna(user['Age'].mode())
user.isnull().sum()

# menggabungkan data buku dan rating
rating_buku = pd.merge(rating, buku, on=['ISBN'],)
rating_buku.head()

"""## **Modeling**

**Popularity based recommendation**

Tahapan-tahapan berikut akan menghasilkan rekomendasi buku paling populer berdasarkan rata-rata dan jumlah rating.
"""

# Berdasarkan rata-rata rating
rata_rating_buku = rating_buku.groupby('ISBN')['Book-Rating'].mean().sort_values(ascending=False)

# Rekomendasi dari rating yang diterima
buku_populer = rating_buku.groupby('ISBN')['Book-Rating'].count().sort_values(ascending=False)

"""**Weighted rating**

Digunakan untuk menggabungkan kedua informasi lalu kemudian akan dipilih 10 top buku
"""

rekomendasi_populer = pd.concat([rata_rating_buku, buku_populer],
                                   axis=1, join='inner',
                                   keys=['Average Rating', 'Rating Received'])

v = rekomendasi_populer['Rating Received']
R = rekomendasi_populer['Average Rating']
C = rekomendasi_populer['Average Rating'].mean()
m = rekomendasi_populer['Rating Received'].quantile(0.75)

rekomendasi_populer['Weighted Rating'] = ((R*v)+(C*m))/(v+m)
rekomendasi_populer = rekomendasi_populer.sort_values('Weighted Rating', ascending=False)
rekomendasi_populer.head(10)

# hasil rekomendasi
judul_populer = pd.merge(rekomendasi_populer, df_book[['ISBN', 'Book-Title']], on='ISBN')
judul_populer = judul_populer[['Weighted Rating', 'Book-Title']]
judul_populer = judul_populer.drop_duplicates('Book-Title').set_index('Book-Title')
judul_populer.head(10)

"""**Model-Based Collaborative filtering Recommendation**

Tahapan-tahapan berikut akan menghasilkan pemberian rekomendasi buku lain kepada user setelah memberi rating.
"""

rating_user = rating_buku
rating_user

# encoder User ID dan Book Title
le = LabelEncoder()
rating_user['UserID'] = le.fit_transform(rating_user['User-ID'])
rating_user['TitleID'] = le.fit_transform(rating_user['Book-Title'])
rating_user.drop('User-ID', axis=1, inplace=True)
rating_user

"""**Pengembangan Model**

Melakukan training pada data menggunakan model SVD dari library surprise, lalu melakukan evaluasi dengan 10-fold cross validation menggunakan RMSE dan MAE.

Melakukan validasi silang 10 kali lipat, melakukan prosedur pemasangan sebanyak sepuluh kali, dengan masing-masing pemasangan dilakukan pada set pelatihan yang terdiri dari 90% set pelatihan dan 10% sebagai set validasi yang dipilih secara acak.

10 fold CV adalah salah satu K fold CV yang direkomendasikan untuk pemilihan model terbaik karena cenderung memberikan estimasi akurasi yang kurang bias dibandingkan dengan CV biasa.
"""

reader = Reader(rating_scale=(1, 10))
data = Dataset.load_from_df(rating_user[['UserID', 'TitleID', 'Book-Rating']], reader)
svd = SVD(verbose=False, n_epochs=10)
cross_validate(svd, data, measures=['RMSE', 'MAE'], cv=10, verbose=True)

"""## **Memberi rekomendasi berdasarkan riwayat rating**"""

def user_recommendation(userid):
    user = rating_user[['ISBN', 'Book-Title', 'Book-Author', 'Publisher', 'TitleID']]
    user = user.reset_index()

    # mendapatkan dataset lengkap
    data = Dataset.load_from_df(rating_user[['UserID','TitleID','Book-Rating']], reader)
    trainset = data.build_full_trainset()
    svd.fit(trainset)
    user['Estimate_Score'] = user['TitleID'].apply(lambda x: svd.predict(userid, x).est)
    user = user.drop(['index','TitleID'], axis = 1)
    user = user.sort_values('Estimate_Score' , ascending = False)
    counts1 = user['Estimate_Score'].value_counts()
    user = user[user['Estimate_Score'].isin(counts1[counts1 == 1].index)]
    return user.head(10)

# mencari user yang menyukai buku Harry Potter
rating_user[rating_user['Book-Title'].str.contains('Harry Potter')]

user_id = 10089
print('Rating buku dari user :')
rating_user[rating_user['UserID'].eq(user_id)]

print('Buku yang mungkin disukai user')
user_recommendation(user_id)